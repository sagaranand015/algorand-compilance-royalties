{
    "hints": {
        "get_emission_rule": {
            "structs": {
                "output": {
                    "name": "EmissionRuleResult",
                    "elements": [
                        [
                            "emission",
                            "string"
                        ],
                        [
                            "max",
                            "uint64"
                        ],
                        [
                            "min",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDcKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "schema": {
        "local": {
            "declared": {},
            "reserved": {}
        },
        "global": {
            "declared": {
                "emission_parameter": {
                    "type": "bytes",
                    "key": "emission_parameter",
                    "descr": "Emission Parameter to keep track of"
                },
                "emission_max": {
                    "type": "uint64",
                    "key": "emission_max",
                    "descr": "Max value of the emission parameter"
                },
                "emission_min": {
                    "type": "uint64",
                    "key": "emission_min",
                    "descr": "Min value of the emission parameter"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "ComplianceContract",
        "methods": [
            {
                "name": "get_emission_rule",
                "args": [],
                "returns": {
                    "type": "(string,uint64,uint64)"
                },
                "desc": "Returns the rules defined by the regulator for the given emission SC"
            },
            {
                "name": "set_emission_rule",
                "args": [
                    {
                        "type": "string",
                        "name": "emission_parameter"
                    },
                    {
                        "type": "uint64",
                        "name": "emission_max"
                    },
                    {
                        "type": "uint64",
                        "name": "emission_min"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Sets the rules defined by the regulator for the given emission"
            },
            {
                "name": "is_business_compliant",
                "args": [
                    {
                        "type": "string",
                        "name": "emission_parameter"
                    },
                    {
                        "type": "uint64",
                        "name": "emission_value"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Returns true/false based on whether the business is compliant to the emissions value or not"
            },
            {
                "name": "create_compliance_nft",
                "args": [
                    {
                        "type": "address",
                        "name": "business_address"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates the compliance NFT for the business via the Algorand SC"
            },
            {
                "name": "allocate_compliance_nft_to_business",
                "args": [
                    {
                        "type": "address",
                        "name": "business_address"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates the compliance NFT for the business via the Algorand SC"
            },
            {
                "name": "create_reward_token_supply",
                "args": [],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Create the Reward tokens in supply, to be done by the application's creator itself"
            },
            {
                "name": "allocate_reward_token_to_business",
                "args": [
                    {
                        "type": "address",
                        "name": "business_address"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates the compliance NFT for the business via the Algorand SC"
            }
        ],
        "networks": {},
        "desc": "\n    Compliance Contract for storing business' compliance analysis on chain\n    and creating/minting NFTs for businesses based on the rules defined by the regulators.\n    "
    }
}