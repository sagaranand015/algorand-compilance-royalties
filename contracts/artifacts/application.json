{
    "hints": {
        "get_emission_rule": {
            "structs": {
                "output": {
                    "name": "EmissionRuleResult",
                    "elements": [
                        [
                            "emission",
                            "string"
                        ],
                        [
                            "max",
                            "uint64"
                        ],
                        [
                            "min",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDcKaW50Y2Jsb2NrIDAgMSA0CmJ5dGVjYmxvY2sgMHgxNTFmN2M3NSAweDY1NmQ2OTczNzM2OTZmNmU1ZjcwNjE3MjYxNmQ2NTc0NjU3MiAweDY1NmQ2OTczNzM2OTZmNmU1ZjZkNjE3OCAweDY1NmQ2OTczNzM2OTZmNmU1ZjZkNjk2ZSAweDAwCnR4biBOdW1BcHBBcmdzCmludGNfMCAvLyAwCj09CmJueiBtYWluX2wxMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDc0YjkwMzhkIC8vICJnZXRfZW1pc3Npb25fcnVsZSgpKHN0cmluZyx1aW50NjQsdWludDY0KSIKPT0KYm56IG1haW5fbDExCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MGVmOWU2NTIgLy8gInNldF9lbWlzc2lvbl9ydWxlKHN0cmluZyx1aW50NjQsdWludDY0KWJvb2wiCj09CmJueiBtYWluX2wxMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDE3OTQ0ZGI2IC8vICJpc19idXNpbmVzc19jb21wbGlhbnQoc3RyaW5nLHVpbnQ2NClib29sIgo9PQpibnogbWFpbl9sOQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGI0M2RkOWI0IC8vICJjcmVhdGVfY29tcGxpYW5jZV9uZnQoYWRkcmVzcyl1aW50NjQiCj09CmJueiBtYWluX2w4CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4YjYwY2I0OTQgLy8gImFsbG9jYXRlX2NvbXBsaWFuY2VfbmZ0X3RvX2J1c2luZXNzKGFkZHJlc3MsdWludDY0KXVpbnQ2NCIKPT0KYm56IG1haW5fbDcKZXJyCm1haW5fbDc6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKc3RvcmUgMjAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpidG9pCnN0b3JlIDIxCmxvYWQgMjAKbG9hZCAyMQpjYWxsc3ViIGFsbG9jYXRlY29tcGxpYW5jZW5mdHRvYnVzaW5lc3NfMTEKc3RvcmUgMjIKYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CmxvYWQgMjIKaXRvYgpjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2w4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmNhbGxzdWIgY3JlYXRlY29tcGxpYW5jZW5mdF8xMApzdG9yZSAxOApieXRlY18wIC8vIDB4MTUxZjdjNzUKbG9hZCAxOAppdG9iCmNvbmNhdApsb2cKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDk6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKc3RvcmUgMTIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpidG9pCnN0b3JlIDEzCmxvYWQgMTIKbG9hZCAxMwpjYWxsc3ViIGlzYnVzaW5lc3Njb21wbGlhbnRfNgpzdG9yZSAxNApieXRlY18wIC8vIDB4MTUxZjdjNzUKYnl0ZWMgNCAvLyAweDAwCmludGNfMCAvLyAwCmxvYWQgMTQKc2V0Yml0CmNvbmNhdApsb2cKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDEwOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCnN0b3JlIDUKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpidG9pCnN0b3JlIDYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwpidG9pCnN0b3JlIDcKbG9hZCA1CmxvYWQgNgpsb2FkIDcKY2FsbHN1YiBzZXRlbWlzc2lvbnJ1bGVfNQpzdG9yZSA4CmJ5dGVjXzAgLy8gMHgxNTFmN2M3NQpieXRlYyA0IC8vIDB4MDAKaW50Y18wIC8vIDAKbG9hZCA4CnNldGJpdApjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBnZXRlbWlzc2lvbnJ1bGVfNApzdG9yZSAwCmJ5dGVjXzAgLy8gMHgxNTFmN2M3NQpsb2FkIDAKY29uY2F0CmxvZwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTI6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KYm56IG1haW5fbDE4CnR4biBPbkNvbXBsZXRpb24KaW50Y18xIC8vIE9wdEluCj09CmJueiBtYWluX2wxNwp0eG4gT25Db21wbGV0aW9uCmludGNfMiAvLyBVcGRhdGVBcHBsaWNhdGlvbgo9PQpibnogbWFpbl9sMTYKZXJyCm1haW5fbDE2Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiB1cGRhdGVfMgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTc6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIG9wdGluXzMKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE4Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKY2FsbHN1YiBjcmVhdGVfMAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGNyZWF0ZQpjcmVhdGVfMDoKYnl0ZWNfMSAvLyAiZW1pc3Npb25fcGFyYW1ldGVyIgpwdXNoYnl0ZXMgMHggLy8gIiIKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMiAvLyAiZW1pc3Npb25fbWF4IgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlY18zIC8vICJlbWlzc2lvbl9taW4iCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gYXV0aF9vbmx5CmF1dGhvbmx5XzE6Cmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQpyZXRzdWIKCi8vIHVwZGF0ZQp1cGRhdGVfMjoKdHhuIFNlbmRlcgpjYWxsc3ViIGF1dGhvbmx5XzEKLy8gdW5hdXRob3JpemVkCmFzc2VydAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIG9wdF9pbgpvcHRpbl8zOgppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGdldF9lbWlzc2lvbl9ydWxlCmdldGVtaXNzaW9ucnVsZV80OgpieXRlY18yIC8vICJlbWlzc2lvbl9tYXgiCmFwcF9nbG9iYWxfZ2V0CnN0b3JlIDEKYnl0ZWNfMyAvLyAiZW1pc3Npb25fbWluIgphcHBfZ2xvYmFsX2dldApzdG9yZSAyCmJ5dGVjXzEgLy8gImVtaXNzaW9uX3BhcmFtZXRlciIKYXBwX2dsb2JhbF9nZXQKc3RvcmUgMwpsb2FkIDMKbGVuCml0b2IKZXh0cmFjdCA2IDAKbG9hZCAzCmNvbmNhdApzdG9yZSAzCmxvYWQgMwpzdG9yZSA0CnB1c2hpbnQgMTggLy8gMTgKaXRvYgpleHRyYWN0IDYgMApsb2FkIDEKaXRvYgpjb25jYXQKbG9hZCAyCml0b2IKY29uY2F0CmxvYWQgNApjb25jYXQKcmV0c3ViCgovLyBzZXRfZW1pc3Npb25fcnVsZQpzZXRlbWlzc2lvbnJ1bGVfNToKc3RvcmUgMTEKc3RvcmUgMTAKc3RvcmUgOQpieXRlY18xIC8vICJlbWlzc2lvbl9wYXJhbWV0ZXIiCmxvYWQgOQpleHRyYWN0IDIgMAphcHBfZ2xvYmFsX3B1dApieXRlY18yIC8vICJlbWlzc2lvbl9tYXgiCmxvYWQgMTAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMyAvLyAiZW1pc3Npb25fbWluIgpsb2FkIDExCmFwcF9nbG9iYWxfcHV0CmludGNfMSAvLyAxCnJldHN1YgoKLy8gaXNfYnVzaW5lc3NfY29tcGxpYW50CmlzYnVzaW5lc3Njb21wbGlhbnRfNjoKc3RvcmUgMTYKc3RvcmUgMTUKYnl0ZWNfMSAvLyAiZW1pc3Npb25fcGFyYW1ldGVyIgphcHBfZ2xvYmFsX2dldApsb2FkIDE1CmV4dHJhY3QgMiAwCj09Ci8vIEVtaXNzaW9uIFBhcmFtZXRlciBnaXZlbiBpcyBub3QgY29ycmVjdCBmb3IgdGhlIGFwcCBiZWluZyB1c2VkIQphc3NlcnQKbG9hZCAxNgpieXRlY18zIC8vICJlbWlzc2lvbl9taW4iCmFwcF9nbG9iYWxfZ2V0Cj49Ci8vIEVtaXNzaW9uIHZhbHVlIGlzIGxlc3NlciB0aGFuIG1pbiBjb25maWd1cmVkCmFzc2VydApsb2FkIDE2CmJ5dGVjXzIgLy8gImVtaXNzaW9uX21heCIKYXBwX2dsb2JhbF9nZXQKPD0KYm56IGlzYnVzaW5lc3Njb21wbGlhbnRfNl9sMgppbnRjXzAgLy8gMApzdG9yZSAxNwpiIGlzYnVzaW5lc3Njb21wbGlhbnRfNl9sMwppc2J1c2luZXNzY29tcGxpYW50XzZfbDI6CmludGNfMSAvLyAxCnN0b3JlIDE3CmlzYnVzaW5lc3Njb21wbGlhbnRfNl9sMzoKbG9hZCAxNwpyZXRzdWIKCi8vIGNyZWF0ZV9jb21wbGlhbmNlX25mdF9pbnRlcm5hbApjcmVhdGVjb21wbGlhbmNlbmZ0aW50ZXJuYWxfNzoKc3RvcmUgMjQKaXR4bl9iZWdpbgppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEZlZQpwdXNoaW50IDMgLy8gYWNmZwppdHhuX2ZpZWxkIFR5cGVFbnVtCmludGNfMSAvLyAxCml0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVjaW1hbHMKcHVzaGJ5dGVzIDB4NTMyZDQxNTM0MSAvLyAiUy1BU0EiCml0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQpwdXNoYnl0ZXMgMHg1MzRkNDE1MjU0MmQ0MTUzNDEgLy8gIlNNQVJULUFTQSIKaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKcHVzaGJ5dGVzIDB4Njg3NDc0NzAzYTJmMmY3Mzc3NjE3Mzc0Njk2YjY3NzU2OTY0NjUyZTYzNmY2ZDNmNzE3NTY1NzI3OTNkNjE3MzYxMmQ2NDY1NmQ2ZjMwMzEgLy8gImh0dHA6Ly9zd2FzdGlrZ3VpZGUuY29tP3F1ZXJ5PWFzYS1kZW1vMDEiCml0eG5fZmllbGQgQ29uZmlnQXNzZXRVUkwKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBDb25maWdBc3NldE1hbmFnZXIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBDb25maWdBc3NldFJlc2VydmUKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBDb25maWdBc3NldEZyZWV6ZQpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0Q2xhd2JhY2sKaXR4bl9zdWJtaXQKaXR4biBDcmVhdGVkQXNzZXRJRApyZXRzdWIKCi8vIGFwcF9vcHRfaW50b19hc3NldAphcHBvcHRpbnRvYXNzZXRfODoKc3RvcmUgMjUKaXR4bl9iZWdpbgppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEZlZQppbnRjXzIgLy8gYXhmZXIKaXR4bl9maWVsZCBUeXBlRW51bQpsb2FkIDI1Cml0eG5fZmllbGQgWGZlckFzc2V0CmludGNfMSAvLyAxCml0eG5fZmllbGQgQXNzZXRBbW91bnQKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBTZW5kZXIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCml0eG5fc3VibWl0CnJldHN1YgoKLy8gdHJhbnNmZXJfY29tcGxpYW5jZV9uZnRfdG9fYnVzaW5lc3MKdHJhbnNmZXJjb21wbGlhbmNlbmZ0dG9idXNpbmVzc185OgpzdG9yZSAyNwpzdG9yZSAyNgppdHhuX2JlZ2luCmludGNfMCAvLyAwCml0eG5fZmllbGQgRmVlCmludGNfMiAvLyBheGZlcgppdHhuX2ZpZWxkIFR5cGVFbnVtCmxvYWQgMjcKaXR4bl9maWVsZCBYZmVyQXNzZXQKaW50Y18xIC8vIDEKaXR4bl9maWVsZCBBc3NldEFtb3VudApnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwppdHhuX2ZpZWxkIFNlbmRlcgpsb2FkIDI2Cml0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgppdHhuX3N1Ym1pdApyZXRzdWIKCi8vIGNyZWF0ZV9jb21wbGlhbmNlX25mdApjcmVhdGVjb21wbGlhbmNlbmZ0XzEwOgpjYWxsc3ViIGNyZWF0ZWNvbXBsaWFuY2VuZnRpbnRlcm5hbF83CnN0b3JlIDE5CmxvYWQgMTkKY2FsbHN1YiBhcHBvcHRpbnRvYXNzZXRfOApsb2FkIDE5CnJldHN1YgoKLy8gYWxsb2NhdGVfY29tcGxpYW5jZV9uZnRfdG9fYnVzaW5lc3MKYWxsb2NhdGVjb21wbGlhbmNlbmZ0dG9idXNpbmVzc18xMToKc3RvcmUgMjMKbG9hZCAyMwpjYWxsc3ViIHRyYW5zZmVyY29tcGxpYW5jZW5mdHRvYnVzaW5lc3NfOQpsb2FkIDIzCnJldHN1Yg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDcKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "schema": {
        "local": {
            "declared": {},
            "reserved": {}
        },
        "global": {
            "declared": {
                "emission_parameter": {
                    "type": "bytes",
                    "key": "emission_parameter",
                    "descr": "Emission Parameter to keep track of"
                },
                "emission_max": {
                    "type": "uint64",
                    "key": "emission_max",
                    "descr": "Max value of the emission parameter"
                },
                "emission_min": {
                    "type": "uint64",
                    "key": "emission_min",
                    "descr": "Min value of the emission parameter"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "ComplianceContract",
        "methods": [
            {
                "name": "get_emission_rule",
                "args": [],
                "returns": {
                    "type": "(string,uint64,uint64)"
                },
                "desc": "Returns the rules defined by the regulator for the given emission SC"
            },
            {
                "name": "set_emission_rule",
                "args": [
                    {
                        "type": "string",
                        "name": "emission_parameter"
                    },
                    {
                        "type": "uint64",
                        "name": "emission_max"
                    },
                    {
                        "type": "uint64",
                        "name": "emission_min"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Sets the rules defined by the regulator for the given emission"
            },
            {
                "name": "is_business_compliant",
                "args": [
                    {
                        "type": "string",
                        "name": "emission_parameter"
                    },
                    {
                        "type": "uint64",
                        "name": "emission_value"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Returns true/false based on whether the business is compliant to the emissions value or not"
            },
            {
                "name": "create_compliance_nft",
                "args": [
                    {
                        "type": "address",
                        "name": "business_address"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates the compliance NFT for the business via the Algorand SC"
            },
            {
                "name": "allocate_compliance_nft_to_business",
                "args": [
                    {
                        "type": "address",
                        "name": "business_address"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates the compliance NFT for the business via the Algorand SC"
            }
        ],
        "networks": {},
        "desc": "\n    Compliance Contract for storing business' compliance analysis on chain\n    and creating/minting NFTs for businesses based on the rules defined by the regulators.\n    "
    }
}